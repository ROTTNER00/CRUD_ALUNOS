/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-12-06 11:12:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

public final class cadastrar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    // Variável para exibir mensagem de feedback
    request.setCharacterEncoding("UTF-8");
    String mensagem = "";

    // Verifica se o formulário foi enviado
    if (request.getParameter("nome") != null && request.getParameter("idade") != null && request.getParameter("turma") != null) {
        String nome = request.getParameter("nome");
        String idadeStr = request.getParameter("idade");
        String turma = request.getParameter("turma");

        try {
            int idade = Integer.parseInt(idadeStr);

            // Valida a idade (apenas entre 15 e 100 anos)
            if (idade < 15 || idade > 100) {
                mensagem = "Erro: A idade deve estar entre 15 e 100 anos.";
            } else {
                // Conexão com o banco de dados (com a configuração UTF-8)
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conecta = DriverManager.getConnection("jdbc:mysql://localhost:3306/gestao_alunos?characterEncoding=UTF-8", "root", "");

                // Inserir os dados no banco de dados
                String sql = "INSERT INTO alunos (nome, idade, turma) VALUES (?, ?, ?)";
                PreparedStatement st = conecta.prepareStatement(sql);
                st.setString(1, nome);
                st.setInt(2, idade);
                st.setString(3, turma);
                st.executeUpdate();

                mensagem = "Aluno cadastrado com sucesso!";
            }
        } catch (NumberFormatException e) {
            mensagem = "Erro: Idade inválida. Insira um número.";
        } catch (Exception ex) {
            mensagem = "Erro ao cadastrar: " + ex.getMessage();
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <title>Cadastro</title>\n");
      out.write("        <meta charset=\"UTF-8\">\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("        <link rel=\"stylesheet\" href=\"src/CSS/cadastrar.css\">\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        <header> \n");
      out.write("            <h1>SENAI</h1>\n");
      out.write("        </header>\n");
      out.write("        \n");
      out.write("        <main>\n");
      out.write("            <button class=\"imagem-botao\" onclick=\"window.location.href='index.html'\">\n");
      out.write("                <img src=\"src/img/Seta Voltar.png\" alt=\"Seta para voltar\" class=\"seta_voltar\">\n");
      out.write("            </button>\n");
      out.write("            \n");
      out.write("            <!-- Exibe a mensagem de sucesso ou erro -->\n");
      out.write("            ");
 if (!mensagem.isEmpty()) { 
      out.write("\n");
      out.write("                <p class=\"mensagem\">");
      out.print( mensagem );
      out.write("</p>\n");
      out.write("            ");
 } 
      out.write("\n");
      out.write("            \n");
      out.write("            <form class=\"form-container\" method=\"post\" action=\"cadastrar.jsp\">\n");
      out.write("                <div class=\"form-group\">\n");
      out.write("                    <label for=\"nome\">NOME:</label>\n");
      out.write("                    <input type=\"text\" id=\"nome\" name=\"nome\" required>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"form-group\">\n");
      out.write("                    <label for=\"idade\">IDADE:</label>\n");
      out.write("                    <!-- Limitação da idade no front-end -->\n");
      out.write("                    <input type=\"number\" id=\"idade\" name=\"idade\" min=\"15\" max=\"100\" required>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"form-group\">\n");
      out.write("                    <label for=\"turma\">TURMA:</label>\n");
      out.write("                    <input type=\"text\" id=\"turma\" name=\"turma\" required>\n");
      out.write("                </div>\n");
      out.write("                <button type=\"submit\">Cadastrar</button>\n");
      out.write("            </form>\n");
      out.write("        </main>\n");
      out.write("        \n");
      out.write("        <footer>\n");
      out.write("            <img src=\"src/img/Bandeira Senai.png\" alt=\"Bandeira Senai\" class=\"bandeira\"/>\n");
      out.write("        </footer>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
